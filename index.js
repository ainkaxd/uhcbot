require('dotenv').config();
const {
  Client,
  Collection,
  GatewayIntentBits,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle
} = require('discord.js');

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers]
});

client.commands = new Collection();
client.teams = new Map(); // –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
client.registrationMessage = null;

client.once('ready', () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
});

client.on('interactionCreate', async interaction => {
  if (interaction.isChatInputCommand()) {
    const command = client.commands.get(interaction.commandName);
    if (!command) return;
    try {
      await command.execute(interaction, client);
    } catch (error) {
      console.error(error);
      const errorMsg = { content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', ephemeral: true };
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp(errorMsg);
      } else {
        await interaction.reply(errorMsg);
      }
    }
  }

  if (interaction.isButton()) {
    const userId = interaction.user.id;
    if (interaction.customId === 'register') {
      const modal = new ModalBuilder()
        .setCustomId('register-modal')
        .setTitle('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã')
        .addComponents(
          new ActionRowBuilder().addComponents(
            new TextInputBuilder()
              .setCustomId('teammate')
              .setLabel('Discord —Ç–µ–≥ —Ç–∏–º–º–µ–π—Ç–∞ (–ø—Ä–∏–º–µ—Ä: user#0001)')
              .setStyle(TextInputStyle.Short)
              .setRequired(true)
          ),
          new ActionRowBuilder().addComponents(
            new TextInputBuilder()
              .setCustomId('teamname')
              .setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã')
              .setStyle(TextInputStyle.Short)
              .setRequired(true)
          )
        );
      await interaction.showModal(modal);
    }

    if (interaction.customId === 'edit') {
      if (!client.teams.has(userId)) {
        return interaction.reply({ content: '‚ùå –¢—ã –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ.', ephemeral: true });
      }

      const old = client.teams.get(userId);

      const modal = new ModalBuilder()
        .setCustomId('edit-modal')
        .setTitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã')
        .addComponents(
          new ActionRowBuilder().addComponents(
            new TextInputBuilder()
              .setCustomId('teammate')
              .setLabel('–ù–æ–≤—ã–π Discord —Ç–µ–≥ —Ç–∏–º–º–µ–π—Ç–∞')
              .setStyle(TextInputStyle.Short)
              .setRequired(true)
              .setValue(old.teammateTag || '')
          ),
          new ActionRowBuilder().addComponents(
            new TextInputBuilder()
              .setCustomId('teamname')
              .setLabel('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã')
              .setStyle(TextInputStyle.Short)
              .setRequired(true)
              .setValue(old.name || '')
          )
        );
      await interaction.showModal(modal);
    }

    if (interaction.customId === 'unregister') {
      if (!client.teams.has(userId)) {
        return interaction.reply({ content: '‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.', ephemeral: true });
      }
      client.teams.delete(userId);
      await updateTeamListMessage(interaction.guild, client);
      return interaction.reply({ content: '‚úÖ –¢—ã –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
    }
  }

  if (interaction.isModalSubmit()) {
    const userId = interaction.user.id;
    const guild = interaction.guild;
    const members = await guild.members.fetch();

    if (interaction.customId === 'register-modal') {
      const teammateTag = interaction.fields.getTextInputValue('teammate');
      const teamName = interaction.fields.getTextInputValue('teamname');
      const teammate = members.find(u => u.user.tag === teammateTag);

      if (!teammate) {
        return interaction.reply({ content: '‚ùå –¢–∏–º–º–µ–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
      }

      const alreadyInTeam = [...client.teams.values()].some(team =>
        team.leader === userId || team.teammate === userId ||
        team.leader === teammate.id || team.teammate === teammate.id
      );

      if (alreadyInTeam) {
        return interaction.reply({ content: '‚ùå –ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.', ephemeral: true });
      }

      client.teams.set(userId, {
        name: teamName,
        leader: userId,
        teammate: teammate.id,
        teammateTag: teammateTag
      });

      await updateTeamListMessage(guild, client);
      return interaction.reply({ content: `‚úÖ –ö–æ–º–∞–Ω–¥–∞ **${teamName}** –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!`, ephemeral: true });
    }

    if (interaction.customId === 'edit-modal') {
      const newTag = interaction.fields.getTextInputValue('teammate');
      const newName = interaction.fields.getTextInputValue('teamname');
      const newMate = members.find(u => u.user.tag === newTag);

      if (!newMate) {
        return interaction.reply({ content: '‚ùå –ù–æ–≤—ã–π —Ç–∏–º–º–µ–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
      }

      client.teams.set(userId, {
        name: newName,
        leader: userId,
        teammate: newMate.id,
        teammateTag: newTag
      });

      await updateTeamListMessage(guild, client);
      return interaction.reply({ content: `‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ **${newName}**!`, ephemeral: true });
    }
  }
});

async function updateTeamListMessage(guild, client) {
  const channel = await guild.channels.fetch(process.env.REGISTRATION_CHANNEL_ID);
  if (!channel || !client.registrationMessage) return;

  let description = '';
  let index = 1;
  for (const [id, team] of client.teams.entries()) {
    description += `**${index}.** <@${team.leader}> + <@${team.teammate}> ‚Äî **${team.name}**\n`;
    index++;
  }
  if (!description) description = '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.';

  const embed = new EmbedBuilder()
    .setTitle('üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥')
    .setDescription(description)
    .setColor(0x00ae86);

  const row = new ActionRowBuilder().addComponents(
    new ButtonBuilder().setCustomId('register').setLabel('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è').setStyle(ButtonStyle.Success),
    new ButtonBuilder().setCustomId('edit').setLabel('–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤').setStyle(ButtonStyle.Primary),
    new ButtonBuilder().setCustomId('unregister').setLabel('–û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ').setStyle(ButtonStyle.Danger)
  );

  await client.registrationMessage.edit({ embeds: [embed], components: [row] });
}

client.login(process.env.TOKEN);